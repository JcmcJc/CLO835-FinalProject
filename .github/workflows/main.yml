name: Deploy to ECR
# updated ECR Repo week3-1 09/17
on: 
  push:
    branches: [ main ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1
        
    - name: Build, test, tag, and push SQL image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment2
        IMAGE_TAG: mysql-v0.1
      run: |
        ls -ltra
        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_mysql . 
        # Unit test
        docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=pw  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker ps
        echo "Pause for 10 seconds to let container start"
        sleep 10
        docker exec mysql-container mysql -uroot -ppw -e "SHOW DATABASES;"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build, test, tag, and push webapp image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment2
        IMAGE_TAG: webapp-v0.1
      run: |
        ls -ltra
        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
        # Unit test
        export DBPORT=3306
        export DBUSER=root
        export DATABASE=employees
        export DBPWD=pw
        export APP_COLOR=blue
        CONTAINER_ID=$(docker run -d -p 8080:8080 -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)
        DBHOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_ID)
        echo "Database Host: $DBHOST"
        docker run -d -p 8081:8080  -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e  DBUSER=$DBUSER -e DBPWD=$DBPWD  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker ps
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build, test, tag, and push webapp image to Amazon ECR V2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment2
        IMAGE_TAG: webapp-v0.2
      run: |
        ls -ltra
        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
        # Unit test
        export DBPORT=3306
        export DBUSER=root
        export DATABASE=employees
        export DBPWD=pw
        export APP_COLOR=blue
        CONTAINER_ID=$(docker run -d -p 8080:8080 -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)
        DBHOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_ID)
        echo "Database Host: $DBHOST"
        docker run -d -p 8081:8080  -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e  DBUSER=$DBUSER -e DBPWD=$DBPWD  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker ps
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
